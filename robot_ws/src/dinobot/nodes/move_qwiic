#!/usr/bin/env python

import rospy
import time

from qwiic_scmd import QwiicScmd
from std_msgs.msg import String
FORWARD = 0
BACKWARD = 1

def move(motor_ID, value):
	max_pwm = 115.0
	speed = int(min(max(abs(value * max_pwm), 0), max_pwm))
	if value > 0:
		motor_controller.set_speed(motor_ID, FORWARD, speed)
	else:
		motor_controller.set_speed(motor_ID, BACKWARD, speed)
	
# stops all motors
def all_stop():
	move(motor_left_ID,0);
	move(motor_right_ID,0);

# directional commands (degree, speed)
def on_cmd_dir(msg):
	rospy.loginfo(rospy.get_caller_id() + ' cmd_dir=%s', msg.data)

# raw L/R motor commands (speed, speed)
def on_cmd_raw(msg):
	move(motor_left_ID, msg[0])
	move(motor_right_ID, msg[1])
	rospy.loginfo(rospy.get_caller_id() + ' cmd_raw=%s', msg.data)

# simple string commands (left/right/forward/backward/stop)
def on_cmd_str(msg):
	rospy.loginfo(rospy.get_caller_id() + ' cmd_str=%s', msg.data)

	if msg.data.lower() == "left":
		move(motor_left_ID,  -1.0)
		move(motor_right_ID,  1.0) 
	elif msg.data.lower() == "right":
		move(motor_left_ID,   1.0)
		move(motor_right_ID, -1.0) 
	elif msg.data.lower() == "forward":
		move(motor_left_ID,   1.0)
		move(motor_right_ID,  1.0)
	elif msg.data.lower() == "backward":
		move(motor_left_ID,  -1.0)
		move(motor_right_ID, -1.0)  
	elif msg.data.lower() == "stop":
		all_stop()
	else:
		rospy.logerror(rospy.get_caller_id() + ' invalid cmd_str=%s', msg.data)


# initialization
if __name__ == '__main__':

	# setup motor controller
	motor_controller = QwiicScmd(address=0x5A)
	motor_controller.begin()
	motor_controller.enable()
	
	motor_left_ID = 0
	motor_right_ID = 1

	# stop the motors as precaution
	all_stop()

	# setup ros node
	rospy.init_node('move')
	
	rospy.Subscriber('~cmd_dir', String, on_cmd_dir)
	rospy.Subscriber('~cmd_raw', String, on_cmd_raw)
	rospy.Subscriber('~cmd_str', String, on_cmd_str)

	# start running
	rospy.spin()

	# stop motors before exiting
	all_stop()
