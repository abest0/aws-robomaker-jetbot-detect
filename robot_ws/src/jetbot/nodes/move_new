#!/usr/bin/env python2

import rospy
import json
import logging

from Adafruit_MotorHAT import Adafruit_MotorHAT
from std_msgs.msg import String


class MoveRobot:
    motor_left_ID = 1
    motor_right_ID = 2
    max_pwm = 115

    speed_gain_slider = 0.25
    steering_gain_slider = 0.11
    steering_dgain_slider = 0.10
    steering_bias_slider = 0.09


    def __init__(self):
        self.setup_motor_controller()
        self.init_subs()
        self.last_known_command_time = 0

    def setup_motor_controller(self):
        # setup motor controller
        self.motor_driver = Adafruit_MotorHAT(i2c_bus=0)

        self.motor_left = self.motor_driver.getMotor(MoveRobot.motor_left_ID)
        self.motor_right = self.motor_driver.getMotor(MoveRobot.motor_right_ID)

        # stop the motors as precaution
        self.all_stop()

    def init_subs(self):
        self.cmd_dir_sub = rospy.Subscriber('~cmd_dir', String, self.on_cmd_dir)
        self.cmd_raw_sub = rospy.Subscriber('~cmd_raw', String, self.on_cmd_raw)
        self.cmd_str_sub = rospy.Subscriber('~cmd_str', String, self.on_cmd_str)

    def value_to_speed(self, value):
        speed = int(min(max(abs(value * MoveRobot.max_pwm), 0), MoveRobot.max_pwm)), 
        if value > 0:
            direction = Adafruit_MotorHAT.FORWARD
        else:
            direction = Adafruit_MotorHAT.BACKWARD
        return speed, direction

    def set_speed_and_direction(self, left_value=0, right_value=0):
        left_speed, left_direction = self.value_to_speed(left_value)
        right_speed,right_direction = self.value_to_speed(right_value)

        self.motor_left.setSpeed(left_speed)
        self.motor_left.run(left_direction)

        self.motor_right.setSpeed(right_speed)
        self.motor_right.run(right_direction)

        self.last_known_command_time = rospy.Time.now()

    # stops all motors
    def all_stop(self):
        self.motor_left.setSpeed(0)
        self.motor_right.setSpeed(0)

        self.motor_left.run(Adafruit_MotorHAT.RELEASE)
        self.motor_right.run(Adafruit_MotorHAT.RELEASE)

    # directional commands (degree, speed)
    def on_cmd_dir(self, msg):
        rospy.loginfo(rospy.get_caller_id() + ' cmd_dir=%s', msg.data)
        move_dir_recv = json.loads(msg.data)
        angle_cmd = move_dir_recv['angle']
        stop_robot = move_dir_recv['stop_robot']

        # TODO: convert form angle to motor commands here
        '''
        move_dir_sent['angle'] = self.angle
        pid = self.angle * self.config['steering_gain_slider'] + (self.angle - self.angle_last) * self.config['steering_dgain_slider']
        self.angle_last = self.angle
        steering_slider = pid + self.config['steering_bias_slider']
        move_data['left'] = max(min(self.config['speed_gain_slider'] + steering_slider, 1.0), 0.0)
        move_data['right'] = max(min(self.config['speed_gain_slider'] - steering_slider, 1.0), 0.0)
        '''

    # raw L/R motor commands (speed, speed)
    def on_cmd_raw(self, msg):
        rospy.loginfo(rospy.get_caller_id() + ' cmd_raw=%s', msg.data)
        move_data_recv = json.loads(msg.data)
        self.set_speed_and_direction(float(move_data_recv['left']), float(move_data_recv['right']))

    # simple string commands (left/right/forward/backward/stop)
    def on_cmd_str(self, msg):
        rospy.loginfo(rospy.get_caller_id() + ' cmd_str=%s', msg.data)

        if msg.data.lower() == "left":
            self.set_speed_and_direction(-1.0, 1.0)
        elif msg.data.lower() == "right":
            self.set_speed_and_direction(1.0, -1.0)
        elif msg.data.lower() == "forward":
            self.set_speed_and_direction(1.0, 1.0)
        elif msg.data.lower() == "backward":
            self.set_speed_and_direction(-1.0, -1.0)
        elif msg.data.lower() == "stop":
            self.all_stop()
        else:
            rospy.logerror(rospy.get_caller_id() + ' invalid cmd_str=%s', msg.data)

    def main(self):
        while not rospy.is_shutdown():
            # If you haven't received a move command in last 5 seconds, stop
            if rospy.Time.now() - self.last_known_command_time > rospy.Duration(5): 
                self.all_stop()
            rospy.sleep(0.5)

        # Final all stop before ending node
        self.all_stop()

# initialization
if __name__ == '__main__':
    rospy.init_node('move')
    try:
        move = MoveRobot()
        move.main()
    except Exception as e:
        logging.exception("An error occurred in main")
        raise e

